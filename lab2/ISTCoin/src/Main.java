import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.tuweni.bytes.Bytes;

import org.apache.tuweni.units.bigints.UInt256;
import org.hyperledger.besu.datatypes.Address;
import org.hyperledger.besu.datatypes.Wei;
import org.hyperledger.besu.evm.*;
import org.hyperledger.besu.evm.account.Account;
import org.hyperledger.besu.evm.account.MutableAccount;
import org.hyperledger.besu.evm.fluent.EVMExecutor;
import org.hyperledger.besu.evm.fluent.SimpleWorld;
import org.hyperledger.besu.evm.frame.MessageFrame;
import org.hyperledger.besu.evm.processor.ContractCreationProcessor;
import org.hyperledger.besu.evm.tracing.StandardJsonTracer;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.math.BigInteger;

import org.web3j.crypto.Hash;
import org.web3j.utils.Numeric;

public class Main {

    public static String ALICE_ADDRESS = "deaddeaddeaddeaddeaddeaddeaddeaddeaddead";
    public static String BOB_ADDRESS = "beefbeefbeefbeefbeefbeefbeefbeefbeefbeef";
    public static String BLACKLIST_ADDRESS = "1234567891234567891234567891234567891234";
    public static String ISTCOIN_ADDRESS = "9876543219876543219876543219876543219876";
    public static Long TOTAL_SUPPLY = 100000000L;
    public static String COIN_NAME = "ISTCoin";
    public static String COIN_SYMBOL = "IST";

    public static void main(String[] args) {
        SimpleWorld simpleWorld = new SimpleWorld();

        Address aliceAddress = Address.fromHexString(ALICE_ADDRESS);
        simpleWorld.createAccount(aliceAddress,0, Wei.fromEth(100));
        MutableAccount aliceAccount = (MutableAccount) simpleWorld.get(aliceAddress);
        System.out.println("Sender Account");
        System.out.println("  Address: "+aliceAccount.getAddress());
        System.out.println("  Balance: "+aliceAccount.getBalance());
        System.out.println("  Nonce: "+aliceAccount.getNonce());
        System.out.println();

        Address bobAddress = Address.fromHexString(BOB_ADDRESS);
        simpleWorld.createAccount(bobAddress,0, Wei.fromEth(100));
        MutableAccount bobAccount = (MutableAccount) simpleWorld.get(bobAddress);

        ByteArrayOutputStream creationOutputStream = new ByteArrayOutputStream();
        PrintStream creationPrintStream = new PrintStream(creationOutputStream);
        StandardJsonTracer creationTracer = new StandardJsonTracer(System.out, true, true, true, true);

        // Addresses
        String alicePaddedAddress = padHexStringTo256Bit(aliceAddress.toHexString());
        String bobPaddedAddress = padHexStringTo256Bit(bobAddress.toHexString());
        Address istCoinContractAddress = Address.fromHexString(ISTCOIN_ADDRESS);

        /*
        Address blacklistContractAddress = Address.fromHexString(BLACKLIST_ADDRESS);

        // Create Blacklist Contract
        simpleWorld.createAccount(blacklistContractAddress,0, Wei.fromEth(0));
        MutableAccount blacklistContractAccount = (MutableAccount) simpleWorld.get(blacklistContractAddress);
         */

        // Create ISTCoin Contract
        simpleWorld.createAccount(istCoinContractAddress,0, Wei.fromEth(0));
        MutableAccount istCoinAccount = (MutableAccount) simpleWorld.get(istCoinContractAddress);

        /*
        // Blacklist attribute indexes
        String ownerVariableIndex = convertIntegerToHex256Bit(0);
        String blacklistMappingIndex = convertIntegerToHex256Bit(1);
        String bobBlacklistSlotMapping = Numeric.toHexStringNoPrefix(Hash.sha3(Numeric.hexStringToByteArray(bobPaddedAddress + blacklistMappingIndex)));

        // Set blacklist contract owner and contract code
        blacklistContractAccount.setStorageValue(UInt256.fromHexString(ownerVariableIndex), UInt256.fromHexString(ALICE_ADDRESS));
        blacklistContractAccount.setCode(Bytes.fromHexString(""));
        System.out.println("Bob blacklist status: " + simpleWorld.get(blacklistContractAddress).getStorageValue(UInt256.fromHexString(bobBlacklistSlotMapping)));
         */

        // ISTCoin attribute indexes
        String balanceVariableIndex = convertIntegerToHex256Bit(0);
        String totalSupplyVariableIndex = convertIntegerToHex256Bit(2);
        String nameVariableIndex = convertIntegerToHex256Bit(3);
        String symbolVariableIndex = convertIntegerToHex256Bit(4);
        String ownerVariableIndex = convertIntegerToHex256Bit(5);
        String blacklistMappingIndex = convertIntegerToHex256Bit(6);

        String bobBlacklistSlotMapping = Numeric.toHexStringNoPrefix(Hash.sha3(Numeric.hexStringToByteArray(bobPaddedAddress + blacklistMappingIndex)));

        // Setting ISTCoin attributes, setting code and minting full supply to Alice
        UInt256 totalSupply = UInt256.valueOf(TOTAL_SUPPLY);
        String aliceBalanceSlotMapping = Numeric.toHexStringNoPrefix(Hash.sha3(Numeric.hexStringToByteArray(alicePaddedAddress + balanceVariableIndex)));
        String bobBalanceSlotMapping = Numeric.toHexStringNoPrefix(Hash.sha3(Numeric.hexStringToByteArray(bobPaddedAddress + balanceVariableIndex)));
        istCoinAccount.setCode(Bytes.fromHexString("608060405234801561000f575f80fd5b50600436106100f3575f3560e01c806370a0823111610095578063a9059cbb11610064578063a9059cbb14610287578063dd62ed3e146102b7578063f2fde38b146102e7578063fe575a8714610303576100f3565b806370a0823114610211578063715018a6146102415780638da5cb5b1461024b57806395d89b4114610269576100f3565b806323b872dd116100d157806323b872dd14610163578063313ce5671461019357806344337ea1146101b1578063537df3b6146101e1576100f3565b806306fdde03146100f7578063095ea7b31461011557806318160ddd14610145575b5f80fd5b6100ff610333565b60405161010c91906110e8565b60405180910390f35b61012f600480360381019061012a9190611199565b6103c3565b60405161013c91906111f1565b60405180910390f35b61014d6103e5565b60405161015a9190611219565b60405180910390f35b61017d60048036038101906101789190611232565b6103ee565b60405161018a91906111f1565b60405180910390f35b61019b610467565b6040516101a8919061129d565b60405180910390f35b6101cb60048036038101906101c691906112b6565b61046f565b6040516101d891906111f1565b60405180910390f35b6101fb60048036038101906101f691906112b6565b6105a3565b60405161020891906111f1565b60405180910390f35b61022b600480360381019061022691906112b6565b6106d5565b6040516102389190611219565b60405180910390f35b61024961071a565b005b61025361072d565b60405161026091906112f0565b60405180910390f35b610271610755565b60405161027e91906110e8565b60405180910390f35b6102a1600480360381019061029c9190611199565b6107e5565b6040516102ae91906111f1565b60405180910390f35b6102d160048036038101906102cc9190611309565b610852565b6040516102de9190611219565b60405180910390f35b61030160048036038101906102fc91906112b6565b6108d4565b005b61031d600480360381019061031891906112b6565b610958565b60405161032a91906111f1565b60405180910390f35b60606003805461034290611374565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90611374565b80156103b95780601f10610390576101008083540402835291602001916103b9565b820191905f5260205f20905b81548152906001019060200180831161039c57829003601f168201915b5050505050905090565b5f806103cd6109aa565b90506103da8185856109b1565b600191505092915050565b5f600254905090565b5f6103f884610958565b1561043a57836040517fffa4e61800000000000000000000000000000000000000000000000000000000815260040161043191906112f0565b60405180910390fd5b5f6104436109aa565b90506104508582856109c3565b61045b858585610a56565b60019150509392505050565b5f6002905090565b5f610478610b46565b60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f9906113ee565b60405180910390fd5b600160065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ff9b68063b051b82957fa193585681240904fed808db8b30fc5a2d2202c6ed62760405160405180910390a260019050919050565b5f6105ac610b46565b60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062c90611456565b60405180910390fd5b5f60065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2b6bf71b58b3583add364b3d9060ebf8019650f65f5be35f5464b9cb3e4ba2d460405160405180910390a260019050919050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610722610b46565b61072b5f610bcd565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461076490611374565b80601f016020809104026020016040519081016040528092919081815260200182805461079090611374565b80156107db5780601f106107b2576101008083540402835291602001916107db565b820191905f5260205f20905b8154815290600101906020018083116107be57829003601f168201915b5050505050905090565b5f806107ef6109aa565b90506107fa81610958565b1561083c57806040517fffa4e61800000000000000000000000000000000000000000000000000000000815260040161083391906112f0565b60405180910390fd5b610847818585610a56565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6108dc610b46565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361094c575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161094391906112f0565b60405180910390fd5b61095581610bcd565b50565b5f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b5f33905090565b6109be8383836001610c90565b505050565b5f6109ce8484610852565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610a505781811015610a41578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610a3893929190611474565b60405180910390fd5b610a4f84848484035f610c90565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ac6575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610abd91906112f0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b36575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b2d91906112f0565b60405180910390fd5b610b41838383610e5f565b505050565b610b4e6109aa565b73ffffffffffffffffffffffffffffffffffffffff16610b6c61072d565b73ffffffffffffffffffffffffffffffffffffffff1614610bcb57610b8f6109aa565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610bc291906112f0565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610d00575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610cf791906112f0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d70575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610d6791906112f0565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610e59578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610e509190611219565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eaf578060025f828254610ea391906114d6565b92505081905550610f7d565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610f38578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610f2f93929190611474565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fc4578060025f828254039250508190555061100e565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161106b9190611219565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6110ba82611078565b6110c48185611082565b93506110d4818560208601611092565b6110dd816110a0565b840191505092915050565b5f6020820190508181035f83015261110081846110b0565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6111358261110c565b9050919050565b6111458161112b565b811461114f575f80fd5b50565b5f813590506111608161113c565b92915050565b5f819050919050565b61117881611166565b8114611182575f80fd5b50565b5f813590506111938161116f565b92915050565b5f80604083850312156111af576111ae611108565b5b5f6111bc85828601611152565b92505060206111cd85828601611185565b9150509250929050565b5f8115159050919050565b6111eb816111d7565b82525050565b5f6020820190506112045f8301846111e2565b92915050565b61121381611166565b82525050565b5f60208201905061122c5f83018461120a565b92915050565b5f805f6060848603121561124957611248611108565b5b5f61125686828701611152565b935050602061126786828701611152565b925050604061127886828701611185565b9150509250925092565b5f60ff82169050919050565b61129781611282565b82525050565b5f6020820190506112b05f83018461128e565b92915050565b5f602082840312156112cb576112ca611108565b5b5f6112d884828501611152565b91505092915050565b6112ea8161112b565b82525050565b5f6020820190506113035f8301846112e1565b92915050565b5f806040838503121561131f5761131e611108565b5b5f61132c85828601611152565b925050602061133d85828601611152565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061138b57607f821691505b60208210810361139e5761139d611347565b5b50919050565b7f416c726561647920626c61636b6c6973746564000000000000000000000000005f82015250565b5f6113d8601383611082565b91506113e3826113a4565b602082019050919050565b5f6020820190508181035f830152611405816113cc565b9050919050565b7f4e6f7420626c61636b6c697374656400000000000000000000000000000000005f82015250565b5f611440600f83611082565b915061144b8261140c565b602082019050919050565b5f6020820190508181035f83015261146d81611434565b9050919050565b5f6060820190506114875f8301866112e1565b611494602083018561120a565b6114a1604083018461120a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6114e082611166565b91506114eb83611166565b9250828201905080821115611503576115026114a9565b5b9291505056fea26469706673582212208bea98b66c9e37ee7a18556d50ac74d44d8536238a40f4a6ebf930284464b3a864736f6c634300081a0033"));
        istCoinAccount.setStorageValue(UInt256.fromHexString(aliceBalanceSlotMapping), totalSupply);
        istCoinAccount.setStorageValue(UInt256.fromHexString(totalSupplyVariableIndex), totalSupply);
        istCoinAccount.setStorageValue(UInt256.fromHexString(nameVariableIndex), UInt256.fromHexString(Hash.sha3String(COIN_NAME)));
        istCoinAccount.setStorageValue(UInt256.fromHexString(symbolVariableIndex), UInt256.fromHexString(Hash.sha3String(COIN_SYMBOL)));
        istCoinAccount.setStorageValue(UInt256.fromHexString(ownerVariableIndex), UInt256.fromHexString(ALICE_ADDRESS));


        var executor = EVMExecutor.evm(EvmSpecVersion.CANCUN);
        executor.tracer(creationTracer);
        executor.code(istCoinAccount.getCode());
        executor.sender(aliceAddress);
        executor.contract(istCoinContractAddress);
        executor.receiver(istCoinContractAddress);
        executor.worldUpdater(simpleWorld.updater());
        executor.commitWorldState();

        executor.callData(Bytes.fromHexString("44337ea1" + bobPaddedAddress));
        executor.execute();

        // Check if Bob is blacklisted
        System.out.println("Bob blacklist status: "+istCoinAccount.getStorageValue(UInt256.fromHexString(bobBlacklistSlotMapping)));

        executor.callData(Bytes.fromHexString("a9059cbb" + bobPaddedAddress + convertIntegerToHex256Bit(1000)));
        executor.execute();

        executor.sender(bobAddress);
        executor.callData(Bytes.fromHexString("a9059cbb" + alicePaddedAddress + convertIntegerToHex256Bit(1001)));
        executor.execute();

        //int totalSupplyOutput = extractIntegerFromReturnData(creationOutputStream);
        //System.out.println("Total Supply: "+totalSupplyOutput);

        System.out.println("Alice's ISTCoin balance: "+ istCoinAccount.getStorageValue(UInt256.fromHexString(aliceBalanceSlotMapping)));
        System.out.println("Bob's ISTCoin balance: "+ istCoinAccount.getStorageValue(UInt256.fromHexString(bobBalanceSlotMapping)));
    }

    public static String convertIntegerToHex256Bit(int number) {
        BigInteger bigInt = BigInteger.valueOf(number);

        return String.format("%064x", bigInt);
    }

    public static void useless(String args[]) {
        SimpleWorld simpleWorld = new SimpleWorld();
        Address aliceAddress = Address.fromHexString(ALICE_ADDRESS);
        Address blacklistContractAddress = Address.fromHexString(BLACKLIST_ADDRESS);
        simpleWorld.createAccount(aliceAddress, 0, Wei.fromEth(100));
        MutableAccount aliceAccount = (MutableAccount) simpleWorld.get(aliceAddress);
        System.out.println("Sender Account");
        System.out.println("  Address: " + aliceAccount.getAddress());
        System.out.println("  Balance: " + aliceAccount.getBalance());
        System.out.println("  Nonce: " + aliceAccount.getNonce());
        System.out.println();

        Address bobAddress = Address.fromHexString(BOB_ADDRESS);
        simpleWorld.createAccount(bobAddress, 0, Wei.fromEth(100));
        MutableAccount bobAccount = (MutableAccount) simpleWorld.get(bobAddress);

        simpleWorld.createAccount(Address.ZERO, 0, Wei.ZERO);

        ByteArrayOutputStream firstCreationOutputStream = new ByteArrayOutputStream();
        PrintStream firstCreationPrintStream = new PrintStream(firstCreationOutputStream);
        StandardJsonTracer firstCreationTracer = new StandardJsonTracer(firstCreationPrintStream, true, true, true, true);

        String blacklistContractCreationCode = "608060405234801561000f575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610081575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100789190610196565b60405180910390fd5b6100908161009660201b60201c565b506101af565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018082610157565b9050919050565b61019081610176565b82525050565b5f6020820190506101a95f830184610187565b92915050565b6107f6806101bc5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c806344337ea114610064578063537df3b614610094578063715018a6146100c45780638da5cb5b146100ce578063f2fde38b146100ec578063fe575a8714610108575b5f80fd5b61007e6004803603810190610079919061065a565b610138565b60405161008b919061069f565b60405180910390f35b6100ae60048036038101906100a9919061065a565b61026b565b6040516100bb919061069f565b60405180910390f35b6100cc61039d565b005b6100d66103b0565b6040516100e391906106c7565b60405180910390f35b6101066004803603810190610101919061065a565b6103d7565b005b610122600480360381019061011d919061065a565b61045b565b60405161012f919061069f565b60405180910390f35b5f6101416104ad565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156101cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c29061073a565b60405180910390fd5b6001805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ff9b68063b051b82957fa193585681240904fed808db8b30fc5a2d2202c6ed62760405160405180910390a260019050919050565b5f6102746104ad565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f4906107a2565b60405180910390fd5b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2b6bf71b58b3583add364b3d9060ebf8019650f65f5be35f5464b9cb3e4ba2d460405160405180910390a260019050919050565b6103a56104ad565b6103ae5f610534565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103df6104ad565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361044f575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161044691906106c7565b60405180910390fd5b61045881610534565b50565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b6104b56105f5565b73ffffffffffffffffffffffffffffffffffffffff166104d36103b0565b73ffffffffffffffffffffffffffffffffffffffff1614610532576104f66105f5565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161052991906106c7565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61062982610600565b9050919050565b6106398161061f565b8114610643575f80fd5b50565b5f8135905061065481610630565b92915050565b5f6020828403121561066f5761066e6105fc565b5b5f61067c84828501610646565b91505092915050565b5f8115159050919050565b61069981610685565b82525050565b5f6020820190506106b25f830184610690565b92915050565b6106c18161061f565b82525050565b5f6020820190506106da5f8301846106b8565b92915050565b5f82825260208201905092915050565b7f416c726561647920626c61636b6c6973746564000000000000000000000000005f82015250565b5f6107246013836106e0565b915061072f826106f0565b602082019050919050565b5f6020820190508181035f83015261075181610718565b9050919050565b7f4e6f7420626c61636b6c697374656400000000000000000000000000000000005f82015250565b5f61078c600f836106e0565b915061079782610758565b602082019050919050565b5f6020820190508181035f8301526107b981610780565b905091905056fea2646970667358221220bdc82bfb846699dde9c0b1c9bb5b185b0fc4ca3bdf713ea264a0e1cab3a187e064736f6c634300081a0033";
        var executor = EVMExecutor.evm(EvmSpecVersion.CANCUN);
        executor.tracer(firstCreationTracer);
        executor.messageFrameType(MessageFrame.Type.CONTRACT_CREATION);
        executor.code(Bytes.fromHexString(blacklistContractCreationCode));
        executor.sender(aliceAddress);
        executor.receiver(blacklistContractAddress);
        executor.contract(blacklistContractAddress);
        executor.worldUpdater(simpleWorld.updater());
        executor.gas(10_000_000L);
        executor.callData(Bytes.EMPTY);


        // Execute first contract creation
        executor.commitWorldState();
        executor.execute();

        //Address firstContractAddress = Address.contractAddress(aliceAddress, simpleWorld.get(aliceAddress).getNonce() - 1);

        String istCoinContractCreationCode = "60a060405234801561000f575f80fd5b50604051611ae5380380611ae583398181016040528101906100319190610434565b6040518060400160405280600781526020017f495354436f696e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f495354000000000000000000000000000000000000000000000000000000000081525081600390816100ac9190610699565b5080600490816100bc9190610699565b5050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505061012a3361010561013060201b60201c565b600a61011191906108d0565b620f424061011f919061091a565b61013860201b60201c565b50610a13565b5f6002905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036101a8575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161019f919061096a565b60405180910390fd5b6101b95f83836101bd60201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361020d578060025f8282546102019190610983565b925050819055506102db565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610296578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161028d939291906109c5565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610322578060025f828254039250508190555061036c565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103c991906109fa565b60405180910390a3505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610403826103da565b9050919050565b610413816103f9565b811461041d575f80fd5b50565b5f8151905061042e8161040a565b92915050565b5f60208284031215610449576104486103d6565b5b5f61045684828501610420565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806104da57607f821691505b6020821081036104ed576104ec610496565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261054f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610514565b6105598683610514565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61059d61059861059384610571565b61057a565b610571565b9050919050565b5f819050919050565b6105b683610583565b6105ca6105c2826105a4565b848454610520565b825550505050565b5f90565b6105de6105d2565b6105e98184846105ad565b505050565b5b8181101561060c576106015f826105d6565b6001810190506105ef565b5050565b601f82111561065157610622816104f3565b61062b84610505565b8101602085101561063a578190505b61064e61064685610505565b8301826105ee565b50505b505050565b5f82821c905092915050565b5f6106715f1984600802610656565b1980831691505092915050565b5f6106898383610662565b9150826002028217905092915050565b6106a28261045f565b67ffffffffffffffff8111156106bb576106ba610469565b5b6106c582546104c3565b6106d0828285610610565b5f60209050601f831160018114610701575f84156106ef578287015190505b6106f9858261067e565b865550610760565b601f19841661070f866104f3565b5f5b8281101561073657848901518255600182019150602085019450602081019050610711565b86831015610753578489015161074f601f891682610662565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156107ea578086048111156107c6576107c5610768565b5b60018516156107d55780820291505b80810290506107e385610795565b94506107aa565b94509492505050565b5f8261080257600190506108bd565b8161080f575f90506108bd565b8160018114610825576002811461082f5761085e565b60019150506108bd565b60ff84111561084157610840610768565b5b8360020a91508482111561085857610857610768565b5b506108bd565b5060208310610133831016604e8410600b84101617156108935782820a90508381111561088e5761088d610768565b5b6108bd565b6108a084848460016107a1565b925090508184048111156108b7576108b6610768565b5b81810290505b9392505050565b5f60ff82169050919050565b5f6108da82610571565b91506108e5836108c4565b92506109127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846107f3565b905092915050565b5f61092482610571565b915061092f83610571565b925082820261093d81610571565b9150828204841483151761095457610953610768565b5b5092915050565b610964816103f9565b82525050565b5f60208201905061097d5f83018461095b565b92915050565b5f61098d82610571565b915061099883610571565b92508282019050808211156109b0576109af610768565b5b92915050565b6109bf81610571565b82525050565b5f6060820190506109d85f83018661095b565b6109e560208301856109b6565b6109f260408301846109b6565b949350505050565b5f602082019050610a0d5f8301846109b6565b92915050565b6080516110ac610a395f395f81816102e4015281816104d4015261064601526110ac5ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c806370a082311161006457806370a082311461015a57806395d89b411461018a578063a9059cbb146101a8578063dd62ed3e146101d8578063f3e1a4df146102085761009c565b806306fdde03146100a0578063095ea7b3146100be57806318160ddd146100ee57806323b872dd1461010c578063313ce5671461013c575b5f80fd5b6100a8610226565b6040516100b59190610c5c565b60405180910390f35b6100d860048036038101906100d39190610d0d565b6102b6565b6040516100e59190610d65565b60405180910390f35b6100f66102d8565b6040516101039190610d8d565b60405180910390f35b61012660048036038101906101219190610da6565b6102e1565b6040516101339190610d65565b60405180910390f35b6101446103e9565b6040516101519190610e11565b60405180910390f35b610174600480360381019061016f9190610e2a565b6103f1565b6040516101819190610d8d565b60405180910390f35b610192610436565b60405161019f9190610c5c565b60405180910390f35b6101c260048036038101906101bd9190610d0d565b6104c6565b6040516101cf9190610d65565b60405180910390f35b6101f260048036038101906101ed9190610e55565b6105c2565b6040516101ff9190610d8d565b60405180910390f35b610210610644565b60405161021d9190610eee565b60405180910390f35b60606003805461023590610f34565b80601f016020809104026020016040519081016040528092919081815260200182805461026190610f34565b80156102ac5780601f10610283576101008083540402835291602001916102ac565b820191905f5260205f20905b81548152906001019060200180831161028f57829003601f168201915b5050505050905090565b5f806102c0610668565b90506102cd81858561066f565b600191505092915050565b5f600254905090565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fe575a87856040518263ffffffff1660e01b815260040161033b9190610f73565b602060405180830381865afa158015610356573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061037a9190610fb6565b156103bc57836040517fffa4e6180000000000000000000000000000000000000000000000000000000081526004016103b39190610f73565b60405180910390fd5b5f6103c5610668565b90506103d2858285610681565b6103dd858585610714565b60019150509392505050565b5f6002905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461044590610f34565b80601f016020809104026020016040519081016040528092919081815260200182805461047190610f34565b80156104bc5780601f10610493576101008083540402835291602001916104bc565b820191905f5260205f20905b81548152906001019060200180831161049f57829003601f168201915b5050505050905090565b5f806104d0610668565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fe575a87826040518263ffffffff1660e01b815260040161052b9190610f73565b602060405180830381865afa158015610546573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061056a9190610fb6565b156105ac57806040517fffa4e6180000000000000000000000000000000000000000000000000000000081526004016105a39190610f73565b60405180910390fd5b6105b7818585610714565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f33905090565b61067c8383836001610804565b505050565b5f61068c84846105c2565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561070e57818110156106ff578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016106f693929190610fe1565b60405180910390fd5b61070d84848484035f610804565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610784575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161077b9190610f73565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107f4575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016107eb9190610f73565b60405180910390fd5b6107ff8383836109d3565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610874575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161086b9190610f73565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108e4575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016108db9190610f73565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156109cd578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516109c49190610d8d565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a23578060025f828254610a179190611043565b92505081905550610af1565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610aac578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610aa393929190610fe1565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b38578060025f8282540392505081905550610b82565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bdf9190610d8d565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610c2e82610bec565b610c388185610bf6565b9350610c48818560208601610c06565b610c5181610c14565b840191505092915050565b5f6020820190508181035f830152610c748184610c24565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ca982610c80565b9050919050565b610cb981610c9f565b8114610cc3575f80fd5b50565b5f81359050610cd481610cb0565b92915050565b5f819050919050565b610cec81610cda565b8114610cf6575f80fd5b50565b5f81359050610d0781610ce3565b92915050565b5f8060408385031215610d2357610d22610c7c565b5b5f610d3085828601610cc6565b9250506020610d4185828601610cf9565b9150509250929050565b5f8115159050919050565b610d5f81610d4b565b82525050565b5f602082019050610d785f830184610d56565b92915050565b610d8781610cda565b82525050565b5f602082019050610da05f830184610d7e565b92915050565b5f805f60608486031215610dbd57610dbc610c7c565b5b5f610dca86828701610cc6565b9350506020610ddb86828701610cc6565b9250506040610dec86828701610cf9565b9150509250925092565b5f60ff82169050919050565b610e0b81610df6565b82525050565b5f602082019050610e245f830184610e02565b92915050565b5f60208284031215610e3f57610e3e610c7c565b5b5f610e4c84828501610cc6565b91505092915050565b5f8060408385031215610e6b57610e6a610c7c565b5b5f610e7885828601610cc6565b9250506020610e8985828601610cc6565b9150509250929050565b5f819050919050565b5f610eb6610eb1610eac84610c80565b610e93565b610c80565b9050919050565b5f610ec782610e9c565b9050919050565b5f610ed882610ebd565b9050919050565b610ee881610ece565b82525050565b5f602082019050610f015f830184610edf565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f4b57607f821691505b602082108103610f5e57610f5d610f07565b5b50919050565b610f6d81610c9f565b82525050565b5f602082019050610f865f830184610f64565b92915050565b610f9581610d4b565b8114610f9f575f80fd5b50565b5f81519050610fb081610f8c565b92915050565b5f60208284031215610fcb57610fca610c7c565b5b5f610fd884828501610fa2565b91505092915050565b5f606082019050610ff45f830186610f64565b6110016020830185610d7e565b61100e6040830184610d7e565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61104d82610cda565b915061105883610cda565b92508282019050808211156110705761106f611016565b5b9291505056fea26469706673582212201689ddcca032d788f8fe416be7e8830279d170b375ccadb5faeba66b35118c0b64736f6c634300081a0033";

        Address istcoinAddress = Address.fromHexString(ISTCOIN_ADDRESS);

        // Encode the first contract's address as a parameter
        // The address needs to be encoded as a 32-byte value (padded to the left)
        String addressParameter = padHexStringTo256Bit(BLACKLIST_ADDRESS);

        System.out.println("Blacklist contract code: " + istCoinContractCreationCode);
        System.out.println("Address parameter: " + addressParameter);

        // Append the parameter to the creation code
        String secondContractCreationCodeWithParams = istCoinContractCreationCode + addressParameter;
        System.out.println("Second contract creation code with params: " + secondContractCreationCodeWithParams);

        executor.code(Bytes.fromHexString(secondContractCreationCodeWithParams));
        executor.receiver(istcoinAddress);
        executor.contract(istcoinAddress);
        executor.sender(aliceAddress);
        executor.worldUpdater(simpleWorld.updater());
        executor.callData(Bytes.EMPTY);

        // Execute second contract creation
        executor.commitWorldState();
        executor.execute();

        String bobPaddedAddress = padHexStringTo256Bit(bobAddress.toHexString());

        var executor2 = EVMExecutor.evm(EvmSpecVersion.CANCUN);
        executor2.code(Bytes.fromHexString("608060405234801561000f575f80fd5b5060043610610060575f3560e01c806344337ea114610064578063537df3b614610094578063715018a6146100c45780638da5cb5b146100ce578063f2fde38b146100ec578063fe575a8714610108575b5f80fd5b61007e6004803603810190610079919061065a565b610138565b60405161008b919061069f565b60405180910390f35b6100ae60048036038101906100a9919061065a565b61026b565b6040516100bb919061069f565b60405180910390f35b6100cc61039d565b005b6100d66103b0565b6040516100e391906106c7565b60405180910390f35b6101066004803603810190610101919061065a565b6103d7565b005b610122600480360381019061011d919061065a565b61045b565b60405161012f919061069f565b60405180910390f35b5f6101416104ad565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156101cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c29061073a565b60405180910390fd5b6001805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ff9b68063b051b82957fa193585681240904fed808db8b30fc5a2d2202c6ed62760405160405180910390a260019050919050565b5f6102746104ad565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f4906107a2565b60405180910390fd5b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2b6bf71b58b3583add364b3d9060ebf8019650f65f5be35f5464b9cb3e4ba2d460405160405180910390a260019050919050565b6103a56104ad565b6103ae5f610534565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103df6104ad565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361044f575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161044691906106c7565b60405180910390fd5b61045881610534565b50565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b6104b56105f5565b73ffffffffffffffffffffffffffffffffffffffff166104d36103b0565b73ffffffffffffffffffffffffffffffffffffffff1614610532576104f66105f5565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161052991906106c7565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61062982610600565b9050919050565b6106398161061f565b8114610643575f80fd5b50565b5f8135905061065481610630565b92915050565b5f6020828403121561066f5761066e6105fc565b5b5f61067c84828501610646565b91505092915050565b5f8115159050919050565b61069981610685565b82525050565b5f6020820190506106b25f830184610690565b92915050565b6106c18161061f565b82525050565b5f6020820190506106da5f8301846106b8565b92915050565b5f82825260208201905092915050565b7f416c726561647920626c61636b6c6973746564000000000000000000000000005f82015250565b5f6107246013836106e0565b915061072f826106f0565b602082019050919050565b5f6020820190508181035f83015261075181610718565b9050919050565b7f4e6f7420626c61636b6c697374656400000000000000000000000000000000005f82015250565b5f61078c600f836106e0565b915061079782610758565b602082019050919050565b5f6020820190508181035f8301526107b981610780565b905091905056fea2646970667358221220bdc82bfb846699dde9c0b1c9bb5b185b0fc4ca3bdf713ea264a0e1cab3a187e064736f6c634300081a0033"));
        executor2.sender(aliceAddress);
        executor2.worldUpdater(simpleWorld.updater());
        executor2.tracer(firstCreationTracer);
        executor2.receiver(blacklistContractAddress);
        executor2.contract(blacklistContractAddress);
        executor2.callData(Bytes.fromHexString("44337ea1" + bobPaddedAddress));
        executor2.messageFrameType(MessageFrame.Type.MESSAGE_CALL);
        executor2.commitWorldState();
        executor2.execute();


        MutableAccount istCoinAccount = simpleWorld.getAccount(istcoinAddress);
        executor.code(istCoinAccount.getCode());
        executor.sender(aliceAddress);
        executor.contract(istcoinAddress);
        executor.receiver(istcoinAddress);
        executor.worldUpdater(simpleWorld.updater());
        executor.commitWorldState();

        executor.callData(Bytes.fromHexString("a9059cbb" + bobPaddedAddress + convertIntegerToHex256Bit(1000)));
        //executor.callData(Bytes.fromHexString("18160ddd"));
        executor.execute();

        MutableAccount blacklistContractAccount = (MutableAccount) simpleWorld.get(blacklistContractAddress);

    }

    public static String padHexStringTo256Bit(String hexString) {
        if (hexString.startsWith("0x")) {
            hexString = hexString.substring(2);
        }

        int length = hexString.length();
        int targetLength = 64;

        if (length >= targetLength) {
            return hexString.substring(0, targetLength);
        }

        return "0".repeat(targetLength - length) +
                hexString;
    }

    private static String extractReturnData(ByteArrayOutputStream byteArrayOutputStream) {
        String[] lines = byteArrayOutputStream.toString().split("\\r?\\n");
        JsonObject jsonObject = JsonParser.parseString(lines[lines.length - 1]).getAsJsonObject();

        String memory = jsonObject.get("memory").getAsString();

        JsonArray stack = jsonObject.get("stack").getAsJsonArray();
        int offset = Integer.decode(stack.get(stack.size() - 1).getAsString());
        int size = Integer.decode(stack.get(stack.size() - 2).getAsString());

        return memory.substring(2 + offset * 2, 2 + offset * 2 + size * 2);
    }

    private static int extractIntegerFromReturnData(ByteArrayOutputStream byteArrayOutputStream) {
        String returnData = extractReturnData(byteArrayOutputStream);
        return Integer.decode("0x" + returnData);
    }

    private static boolean extractBooleanFromReturnData(ByteArrayOutputStream byteArrayOutputStream) {
        // Parse the last byte (in Solidity, booleans are typically the last byte)
        // We'll check if the last byte is non-zero (true) or zero (false)
        String returnData = extractReturnData(byteArrayOutputStream);
        String lastByte = returnData.substring(returnData.length() - 2);
        return !lastByte.equals("00");
    }

}
